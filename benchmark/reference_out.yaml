run: # Configurations for a specific run
  random_seed: 0530 # Integer number of specifying random seed
  log_dir: benchmark29 # String for indicating where to save all the information, including models and computed signals. We can reuse the models saved in the same log_dir.
  time_log: True # Indicate whether to log the time for each step

audit: # Configurations for auditing
  privacy_game: privacy_loss_model # Indicate the privacy game from privacy_loss_model, avg_privacy_loss_training_algo, privacy_loss_sample
  algorithm: reference # String for indicating the membership inference attack. We currently support population, reference.
  report_log: report_reference_out # String that indicates the folder where we save the and auditing report.
  device: cuda:0
  augmentation: None # Indicate whether to use augmentation for the query points
  audit_batch_size: 1000
  num_reference_models: 28
  batch_size: speedyresnet_batch_size # Integer number for indicating the batch size of training the reference models if reference attack is used.
  f_reference_dataset: 1 # Float number for indicating the ratio between the reference train dataset and the target train dataset.
  optimizer: speedyresnet_optimizer # String which indicates the optimizer for training reference models. We support Adam and SGD.
  learning_rate: speedyresnet_learning_rate # Float number for indicating learning rate for training the reference model.
  weight_decay: speedyresnet_weight_decay # Float number for indicating weight decay for training the reference model.
  model_name: speedyresnet # String for indicating the model type. We support CNN, wrn28-1, wrn28-2, wrn28-10, vgg16, nn and speedyresnet (requires cuda). More model types can be added in model.py.
  epochs: speedyresnet_epochs # Integer number for indicating the epochs for training target model.
  report_log: report_reference_out # String that indicates the folder where we save the and auditing report.
  split_method: uniform # String for indicating the splitting methods for reference dataset. We support uniform and leave_one_out.

train: # Configuration for training
  type: pytorch # Training framework (we only support pytorch now).
  model_name: speedyresnet # String for indicating the model type. We support CNN. More model types can be added in model.py.
  device: cuda:0 # String for indicating the device we want to use for training models.
  num_target_model: 1 # Number of total models we want to test
  optimizer: speedyresnet_optimizer
  learning_rate: speedyresnet_learning_rate
  weight_decay: speedyresnet_weight_decay
  batch_size: speedyresnet_batch_size
  epochs: speedyresnet_epochs
  test_batch_size: 10000
  model_idx: 0

data: # Configuration for data
  dataset: cifar10 # String indicates the name of the dataset (i.e., cifar10, cifar100, purchase100, texas1000)
  f_train: 0.3 # Float number from 0 to 1 indicating the fraction of the train dataset
  f_test: 0.3 # Float number from 0 to 1 indicating the fraction of the test dataset
  split_method: no_overlapping # String for indicating the methods of splitting the dataset between train, test, and auditing.
  f_audit: 0.4 # Float from 0 to 1, indicating the fraction of the auditing dataset
  data_dir: ../data # String about where to save the data.
